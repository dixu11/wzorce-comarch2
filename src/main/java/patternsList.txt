    wzorce kreacyjne:
            Budowniczy (obiektowy)  - wygodniejszy niż konstruktor sposób tworzenia obiektu (wieloetapowo i z opcjonalnymi parametrami)
            Fabryka abstrakcyjna (obiektowy), -wygodny interfejs do tworzenia obiektu z danej rodziny, za którym kryje
             się fabryka składająca obiekty w wybranym stylu np. tryb jasny tryb ciemny
            Metoda wytwórcza (klasowy) - sposób aby obiekt mógł stworzyć swój pomocniczy obiekt ale pozostał niezależny od doboru implementacji
        Prototyp (obiektowy) - dostarcza mechanizm kopiowania obiektów (wykorzystuje metodę clone z Object + zdecyduj jak głęboką kopię potrzebujesz)
            Singleton (obiektowy); - może istnieć maksymalnie 1 obiekt danego typu i jest ogólnodostępny

    wzorce strukturalne:
        Adapter (klasowy oraz obiektowy), dopasowanie obiektu pod niepasujący interfejs bez modyfikowania klasy (nie zmienia działania)
        Dekorator (obiektowy), osobna klasa na nową funkcje, można je ze sobą łączyć w runtime  (rozszerza działanie - alternatywa dla dziedziczenia)
        Pełnomocnik - proxy (obiektowy), opakowuje obiekt aby wykonywać dodatkowe opracje przy okazji dla optymalizacji bezpieczenstwa statystyk itp.
        Kompozyt (obiektowy), ujednolicenie dostępu do zgrupowanych obiektów oraz pojedynczych obiektów.
        Pyłek (obiektowy), oszczędza pamięć poprzez oddzielenie wspólnego stanu wielu obiektów i zarządzanie ich składaniem przez dedykowaną klasę
        Most (obiektowy), dwie hierarchie dziedziczenie z których ogólny obiekt jednej posiada referencje do ogólnego obiektu drugiej.
                                Oferuje dużą elastyczność i rozdział między abstrakcją i implentacją. (UML)
        Fasada (obiektowy),uproszczenie korzystania ze skomplikowanego systemu (wiele obiektów)

    wzorce czynnościowe/operacyjne:
        Iterator (obiektowy), pozwala traktować obiekt jako zbiór obiektów które możemy przeglądać jeden po drugim aż do końca
        Metoda szablonowa (ang. template method), pozwala nam przygotować abstrakcyjną klasę bazową z ogólnym schematem
                                                                algorytmu który odnosi się do abstrakcyjnych metod
                           dzięki czemu możemy nadpisywać zmienne kroki algorytmu na różne sposoby w jego kolejnych implementacjach
                Strategia - umożliwia zmienianie działania metody obiektu przez przeniesienie tego działania do obiektów strategii i
                            możemy przełączyć się między nimi przestawiając te strategie w runtime
             Stan (obiektowy), - kilka alternatywnych implementacji między którymi możemy przełączyć obiekt w reakcji na zdarzenia
            Łańcuch  (obiektowy),   - pojedyncze serwisy są wiązane w łańcuch i przez niego przechodzi zadanie. Serwisy rozpoznają
                                        czy mają coś do zrobienia jeśli to to robią i przesyłają zadanie dalej
                 Interpreter (klasowy), traktowanie tekstu jako komend do wykonania pewnych operacji
                Mediator (obiektowy), aby uniknąć nadmiaru bezpośrednich zależności między komunikującymi się obiektami - komunikację
                                przenosimy do obiektu Mediatora, przez niego będą zwracać się do siebie.
        Pamiątka/Memento (ang. Memento) (obiektowy),
            Obserwator (obiektowy)  - obiekt generujący dane (zdazenia) informuje o nich zainteresowanych klientów
        Odwiedzający/Wizytator (ang. visitor) (obiektowy),
        Polecenie (obiektowy),



-> klasyczny builder
-> abstrakcyjna fabryka w kodzie
